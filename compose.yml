services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-bibliflow_dev}
      POSTGRES_USER: ${DB_USER:-bibliflow_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-bibliflow_user} -d ${DB_NAME:-bibliflow_dev}",
        ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: on-failure

  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-dev_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-bibliflow_logs_dev}
    env_file:
      - .env
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: on-failure

  backend:
    build:
      context: ./bibliflow-backend
      dockerfile: Dockerfile
      target: development
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-bibliflow_user}:${DB_PASSWORD:-dev_password}@postgres:5432/${DB_NAME:-bibliflow_dev}
      MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-dev_password}@mongodb:27017/${MONGO_DB:-bibliflow_logs_dev}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200,http://127.0.0.1:4200}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      DEBUG: ${DEBUG:-bibliflow:*}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT:-3000}:3000"
      - "${DEBUG_PORT:-9229}:9229"
    volumes:
      # Mount du code source pour le développement
      - ./bibliflow-backend:/app
      # Exclure node_modules pour éviter les conflits
      - backend_node_modules:/app/node_modules
    working_dir: /app
    command: npm run start:dev
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: on-failure
    init: true

  frontend:
    build:
      context: ./bibliflow-frontend
      dockerfile: Dockerfile
      target: development
    environment:
      API_URL: ${API_URL:-http://localhost:3000/api/v1}
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      WDS_SOCKET_HOST: localhost
      WDS_SOCKET_PORT: ${FRONTEND_PORT:-4200}
      NG_CLI_ANALYTICS: "false"
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    volumes:
      # Mount du code source pour le développement
      - ./bibliflow-frontend:/app
      # Exclure node_modules pour éviter les conflits
      - frontend_node_modules:/app/node_modules
    working_dir: /app
    command: npm run start -- --host 0.0.0.0 --poll 2000
    restart: on-failure
    init: true

  # Jenkins local uniquement (ne sera PAS lancé en CI)
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    user: root
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure

volumes:
  postgres_data:
  mongodb_data:
  backend_node_modules:
  frontend_node_modules:
  jenkins_home:
